//////////this code receive the orders from the frontend



function doPost(e) {
  try {
    const sheet = SpreadsheetApp.openByUrl(
      "https://docs.google.com/spreadsheets/d/1TNUhdcpaEI_zYZtawW2zcnDc0hEsvi4jUrcJomMFwWw/edit"
    ).getSheetByName("Orders");

    const data = e.parameter;
    const orderTime = new Date();
    const id = generateUniqueId(sheet);

    // Basic validation
    if (!data.name || !data.email || !data.phone || !data.address || !data.city || !data.state || !data.pincode) {
      throw new Error("Missing required fields");
    }

    // Parse cart JSON safely
    let cartItems = [];
    try {
      cartItems = JSON.parse(data.cart || "[]");
    } catch (err) {
      Logger.log("Error parsing cart JSON: " + err);
      cartItems = [];
    }

    // Save order to sheet
    sheet.appendRow([
      id,
      data.name,
      data.email,
      data.phone,
      data.address,
      data.city,
      data.state,
      data.pincode,
      data.cart || '',
      data.total || '',
      data.paymentMethod || '',
      data.note || '',
      orderTime
    ]);

    // ---------- üõçÔ∏è HTML Cart Table ----------
    const cartTable = cartItems.length
      ? `
        <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
          <thead style="background-color:#f4f4f4;">
            <tr>
              <th>Name</th>
              <th>Discount Price</th>
              <th>Category</th>
              <th>Short Description</th>
              <th>Real Price</th>
              <th>Weight</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>
            ${cartItems.map(item => `
              <tr>
                <td>${item.name || ''}</td>
                <td>${item.disprice || ''}</td>
                <td>${item.category || ''}</td>
                <td>${item.shortdisc || ''}</td>
                <td>${item.realprise || ''}</td>
                <td>${item.weight || ''}</td>
                <td>${item.quantity || ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `
      : "<p>No items in cart.</p>";

    // ---------- üìß ADMIN EMAIL ----------
    const adminEmail = "abhaychorsiya55@gmail.com"; // üîπ Replace with your admin email
    const adminSubject = `üõí New Order Received - ${data.name}`;
    const adminBody = `
      <div style="font-family: Arial, sans-serif; color: #333;">
        <h2>üÜï New Order Received</h2>
        <p><strong>Order ID:</strong> ${id}</p>
        <p><strong>Order Time:</strong> ${orderTime}</p>
        <hr>
        <h3>üë§ Customer Details</h3>
        <p>
          <strong>Name:</strong> ${data.name}<br>
          <strong>Email:</strong> ${data.email}<br>
          <strong>Phone:</strong> ${data.phone}<br>
          <strong>Address:</strong> ${data.address}, ${data.city}, ${data.state} - ${data.pincode}
        </p>
        <hr>
        <h3>üõçÔ∏è Cart Details</h3>
        ${cartTable}
        <hr>
        <p>
          <strong>Total Amount:</strong> ${data.total || 'N/A'}<br>
          <strong>Payment Method:</strong> ${data.paymentMethod || 'N/A'}<br>
          <strong>Note:</strong> ${data.note || 'N/A'}
        </p>
      </div>
    `;

    MailApp.sendEmail({
      to: adminEmail,
      subject: adminSubject,
      htmlBody: adminBody
    });

    // ---------- üíå CUSTOMER RECEIPT EMAIL ----------
    const customerSubject = `üßæ Order Confirmation - Order #${id}`;
    const customerBody = `
      <div style="font-family: Arial, sans-serif; color: #333;">
        <h2 style="color:#4CAF50;">Thank You for Your Order, ${data.name}!</h2>
        <p>We‚Äôve received your order and it‚Äôs being processed. Here‚Äôs your receipt:</p>
        <hr>
        <h3>üßæ Order Summary</h3>
        <p>
          <strong>Order ID:</strong> ${id}<br>
          <strong>Date:</strong> ${orderTime}<br>
          <strong>Payment Method:</strong> ${data.paymentMethod || 'N/A'}
        </p>
        ${cartTable}
        <p style="margin-top: 10px;">
          <strong>Total Amount:</strong> ‚Çπ${data.total || 'N/A'}
        </p>
        <hr>
        <h3>üì¶ Shipping Information</h3>
        <p>
          ${data.name}<br>
          ${data.address}<br>
          ${data.city}, ${data.state} - ${data.pincode}<br>
          Phone: ${data.phone}
        </p>
        <hr>
        <p>We‚Äôll send another email when your order is shipped.</p>
        <p style="color:#777;">If you have any questions, reply to this email or contact us.</p>
        <h4 style="color:#4CAF50;">‚Äî The Spice Store Team üåø</h4>
      </div>
    `;

    MailApp.sendEmail({
      to: data.email, // customer's email
      subject: customerSubject,
      htmlBody: customerBody
    });

    // ---------- ‚úÖ Response ----------
    return ContentService
      .createTextOutput(JSON.stringify({
        success: true,
        message: "Order placed successfully! Emails sent.",
        orderId: id,
        orderTime: orderTime
      }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    Logger.log('Error: ' + error.toString());
    return ContentService
      .createTextOutput(JSON.stringify({
        success: false,
        message: "Error placing order: " + error.message
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// Generate unique order ID
function generateUniqueId(sheet) {
  const lastRow = sheet.getLastRow();
  const existingIds = lastRow > 1
    ? sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat()
    : [];
  let newId;
  do {
    newId = Utilities.getUuid();
  } while (existingIds.includes(newId));
  return newId;
}


//////////frontend/////////
this is order managment dash board code
/*function getOrderData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('Orders');
    
    if (!sheet) {
      Logger.log('Orders not found!');
      // Try to get the first sheet instead
      const firstSheet = ss.getSheets()[0];
      Logger.log('Using first sheet: ' + firstSheet.getName());
      return getOrderDataFromSheet(firstSheet);
    }
    
    return getOrderDataFromSheet(sheet);
    
  } catch (error) {
    Logger.log('Error in getOrderData: ' + error);
    return [];
  }
}

function getOrderDataFromSheet(sheet) {
  const data = sheet.getDataRange().getValues();
  Logger.log('Processing ' + data.length + ' rows');
  
  const orders = [];
  
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    
    // Skip completely empty rows
    if (!row || row.length === 0) {
      Logger.log('Skipping empty row ' + i);
      continue;
    }
    
    // Skip if first column is empty
    if (!row[0] || row[0] === '') {
      Logger.log('Skipping row ' + i + ' - empty first column');
      continue;
    }
    
    // Parse the products JSON from column 8 (index 8)
    let products = [];
    try {
      if (row[8] && row[8] !== '') {
        const productsStr = String(row[8]);
        products = JSON.parse(productsStr);
        Logger.log('Row ' + i + ': Parsed ' + products.length + ' products');
      }
    } catch (e) {
      Logger.log('Row ' + i + ': Error parsing products - ' + e);
    }
    
    const order = {
      orderId: String(row[0] || 'N/A'),
      customerName: String(row[1] || 'N/A'),
      email: String(row[2] || 'N/A'),
      phone: String(row[3] || 'N/A'),
      address: String(row[4] || 'N/A'),
      city: String(row[5] || 'N/A'),
      state: String(row[6] || 'N/A'),
      pincode: String(row[7] || 'N/A'),
      products: products,
      totalAmount: row[9] || '0',
      paymentMethod: String(row[10] || 'N/A'),
      comments: String(row[11] || ''),
      orderDate: String(row[12] || 'N/A')
    };
    
    orders.push(order);
    Logger.log('Added order ' + (i+1) + ': ' + order.orderId);
  }
  
  Logger.log('Total orders created: ' + orders.length);
  return orders;
}

function searchOrders(searchTerm) {
  const orders = getOrderData();
  
  if (!searchTerm || searchTerm.trim() === '') {
    return orders;
  }
  
  const term = searchTerm.toLowerCase();
  
  return orders.filter(order => {
    return order.orderId.toLowerCase().includes(term) ||
           order.customerName.toLowerCase().includes(term) ||
           order.email.toLowerCase().includes(term) ||
           order.phone.includes(term) ||
           order.city.toLowerCase().includes(term);
  });
}

function deleteOrder(orderId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('orders');
    
    if (!sheet) {
      const firstSheet = ss.getSheets()[0];
      return deleteOrderFromSheet(firstSheet, orderId);
    }
    
    return deleteOrderFromSheet(sheet, orderId);
    
  } catch (error) {
    Logger.log('Error in deleteOrder: ' + error);
    return { success: false, message: 'Error: ' + error };
  }
}

function deleteOrderFromSheet(sheet, orderId) {
  const data = sheet.getDataRange().getValues();
  
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    
    if (String(row[0]) === String(orderId)) {
      // Delete the row (i+1 because sheet rows start at 1, not 0)
      sheet.deleteRow(i + 1);
      Logger.log('Deleted order: ' + orderId + ' from row ' + (i + 1));
      return { 
        success: true, 
        message: 'Order deleted successfully',
        orderId: orderId 
      };
    }
  }
  
  Logger.log('Order not found: ' + orderId);
  return { 
    success: false, 
    message: 'Order not found' 
  };
}

*/

////////////backend//////////
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Management</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 20px;
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
    }

    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        radial-gradient(circle at 20% 50%, rgba(255,255,255,0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 0%, transparent 50%);
      pointer-events: none;
      z-index: 0;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      position: relative;
      z-index: 1;
    }

    .header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      margin-bottom: 30px;
      border: 1px solid rgba(255,255,255,0.3);
    }

    .header-top {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
    }

    h1 {
      color: #333;
      font-size: 32px;
      font-weight: 800;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .stats-bar {
      display: flex;
      gap: 20px;
    }

    .stat-item {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 12px 20px;
      border-radius: 12px;
      color: white;
      font-weight: 600;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

    .stat-number {
      font-size: 24px;
      font-weight: 800;
      display: block;
    }

    .stat-label {
      font-size: 12px;
      opacity: 0.9;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .search-box {
      display: flex;
      gap: 12px;
      margin-top: 20px;
    }

    .search-box input {
      flex: 1;
      padding: 14px 24px;
      border: 2px solid #e0e0e0;
      border-radius: 12px;
      font-size: 16px;
      transition: all 0.3s;
      background: white;
    }

    .search-box input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
    }

    .search-box button {
      padding: 14px 32px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 700;
      transition: all 0.3s;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .search-box button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
    }

    .search-box button:active {
      transform: translateY(0);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #6c757d 0%, #495057 100%) !important;
      box-shadow: 0 4px 15px rgba(108, 117, 125, 0.4) !important;
    }

    .btn-secondary:hover {
      box-shadow: 0 6px 20px rgba(108, 117, 125, 0.6) !important;
    }

    .loading {
      text-align: center;
      padding: 80px;
      color: white;
      font-size: 24px;
      font-weight: 600;
    }

    .loading::after {
      content: '...';
      animation: dots 1.5s infinite;
    }

    @keyframes dots {
      0%, 20% { content: '.'; }
      40% { content: '..'; }
      60%, 100% { content: '...'; }
    }

    .orders-grid {
      display: grid;
      gap: 30px;
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .order-card {
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 15px 40px rgba(0,0,0,0.2);
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      border: 1px solid rgba(255,255,255,0.3);
      position: relative;
      overflow: hidden;
    }

    .order-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }

    .order-card:hover {
      transform: translateY(-8px);
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: start;
      margin-bottom: 25px;
      padding-bottom: 20px;
      border-bottom: 2px solid #f0f0f0;
    }

    .order-number {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
      color: white;
      font-size: 18px;
      font-weight: 800;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      box-shadow: 0 4px 10px rgba(255, 107, 107, 0.4);
    }

    .order-id {
      font-size: 15px;
      color: #667eea;
      font-weight: 800;
      background: linear-gradient(135deg, #f0f4ff 0%, #e8ecff 100%);
      padding: 10px 18px;
      border-radius: 25px;
      box-shadow: 0 2px 10px rgba(102, 126, 234, 0.2);
      letter-spacing: 0.5px;
    }

    .order-date {
      font-size: 14px;
      color: #666;
      font-weight: 600;
      background: #f8f9fa;
      padding: 8px 16px;
      border-radius: 20px;
    }

    .customer-info {
      margin-bottom: 25px;
      padding: 20px;
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border-radius: 15px;
    }

    .customer-name {
      font-size: 24px;
      font-weight: 800;
      color: #333;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .info-row {
      display: flex;
      align-items: center;
      margin: 10px 0;
      font-size: 15px;
      color: #555;
    }

    .info-label {
      font-weight: 700;
      color: #333;
      min-width: 110px;
    }

    .address-section {
      background: linear-gradient(135deg, #fff9e6 0%, #fff3cd 100%);
      padding: 20px;
      border-radius: 15px;
      margin-bottom: 25px;
      border-left: 5px solid #ffc107;
      box-shadow: 0 4px 15px rgba(255, 193, 7, 0.2);
    }

    .products-section {
      margin: 25px 0;
    }

    .section-title {
      font-size: 18px;
      font-weight: 800;
      color: #333;
      margin-bottom: 18px;
      display: flex;
      align-items: center;
      gap: 12px;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .product-item {
      background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
      padding: 20px;
      border-radius: 15px;
      margin-bottom: 15px;
      border-left: 5px solid #667eea;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.1);
      transition: all 0.3s;
    }

    .product-item:hover {
      transform: translateX(5px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.2);
    }

    .product-header {
      display: flex;
      justify-content: space-between;
      align-items: start;
      margin-bottom: 15px;
    }

    .product-name {
      font-weight: 800;
      color: #333;
      font-size: 18px;
    }

    .product-price {
      font-weight: 800;
      color: #667eea;
      font-size: 20px;
      background: #f0f4ff;
      padding: 8px 16px;
      border-radius: 20px;
    }

    .product-details {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 12px;
      margin-top: 12px;
      font-size: 14px;
    }

    .product-detail {
      color: #555;
      background: white;
      padding: 8px 12px;
      border-radius: 8px;
      font-weight: 600;
    }

    .product-detail span {
      font-weight: 800;
      color: #667eea;
    }

    .order-summary {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 25px;
      border-radius: 15px;
      margin-top: 25px;
      box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }

    .total-amount {
      color: white;
      font-size: 28px;
      font-weight: 900;
      letter-spacing: 1px;
    }

    .payment-method {
      background: white;
      color: #667eea;
      padding: 12px 24px;
      border-radius: 25px;
      font-weight: 800;
      font-size: 15px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .comments {
      background: linear-gradient(135deg, #fff9e6 0%, #fff3cd 100%);
      border-left: 5px solid #ffc107;
      padding: 15px 20px;
      border-radius: 12px;
      margin-top: 20px;
      font-size: 15px;
      color: #666;
      box-shadow: 0 4px 15px rgba(255, 193, 7, 0.2);
    }

    .comments strong {
      color: #333;
      font-weight: 800;
    }

    .no-orders {
      text-align: center;
      padding: 80px 40px;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      color: #666;
      font-size: 20px;
      font-weight: 600;
      box-shadow: 0 20px 60px rgba(0,0,0,0.2);
    }

    .no-orders::before {
      content: 'üì¶';
      display: block;
      font-size: 60px;
      margin-bottom: 20px;
    }

    .delete-btn {
      background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 700;
      font-size: 14px;
      transition: all 0.3s;
      box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-top: 15px;
      width: 100%;
    }

    .delete-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 53, 69, 0.6);
    }

    .delete-btn:active {
      transform: translateY(0);
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(5px);
      animation: fadeIn 0.3s;
    }

    .modal-content {
      background: white;
      margin: 15% auto;
      padding: 30px;
      border-radius: 20px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      animation: slideDown 0.3s;
      position: relative;
    }

    @keyframes slideDown {
      from {
        transform: translateY(-50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    .modal-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 2px solid #f0f0f0;
    }

    .modal-header h2 {
      color: #dc3545;
      font-size: 24px;
      font-weight: 800;
    }

    .modal-body {
      margin: 20px 0;
      color: #555;
      font-size: 16px;
      line-height: 1.6;
    }

    .modal-footer {
      display: flex;
      gap: 10px;
      margin-top: 25px;
    }

    .modal-btn {
      flex: 1;
      padding: 12px 24px;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 700;
      font-size: 15px;
      transition: all 0.3s;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .modal-btn-confirm {
      background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
    }

    .modal-btn-confirm:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 53, 69, 0.6);
    }

    .modal-btn-cancel {
      background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(108, 117, 125, 0.4);
    }

    .modal-btn-cancel:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(108, 117, 125, 0.6);
    }

    .order-id-highlight {
      background: #fff3cd;
      padding: 8px 12px;
      border-radius: 8px;
      font-weight: 800;
      color: #856404;
      display: inline-block;
      margin: 10px 0;
    }

    @media (max-width: 768px) {
      .header-top {
        flex-direction: column;
        gap: 20px;
        align-items: flex-start;
      }

      .stats-bar {
        width: 100%;
        justify-content: space-between;
      }

      .stat-item {
        flex: 1;
        text-align: center;
      }

      .order-header {
        flex-direction: column;
        gap: 12px;
      }

      .product-details {
        grid-template-columns: 1fr;
      }

      .order-summary {
        flex-direction: column;
        gap: 15px;
        text-align: center;
      }

      .search-box {
        flex-direction: column;
      }

      .search-box button {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <div class="header-top">
        <h1>üì¶ Order Management</h1>
        <div class="stats-bar">
          <div class="stat-item">
            <span class="stat-number" id="totalOrders">0</span>
            <span class="stat-label">Total Orders</span>
          </div>
          <div class="stat-item">
            <span class="stat-number" id="totalRevenue">‚Çπ0</span>
            <span class="stat-label">Revenue</span>
          </div>
        </div>
      </div>
      <div class="search-box">
        <input type="text" id="searchInput" placeholder="üîç Search by Order ID, Name, Email, Phone, or City...">
        <button onclick="searchOrders()">Search</button>
        <button onclick="loadAllOrders()" class="btn-secondary">Show All</button>
      </div>
    </div>

    <div id="ordersContainer" class="loading">
      Loading orders
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <span style="font-size: 40px;">‚ö†Ô∏è</span>
        <h2>Delete Order</h2>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this order?</p>
        <div class="order-id-highlight" id="modalOrderId"></div>
        <p style="margin-top: 15px; color: #dc3545; font-weight: 600;">‚ö†Ô∏è This action cannot be undone!</p>
      </div>
      <div class="modal-footer">
        <button class="modal-btn modal-btn-cancel" onclick="closeDeleteModal()">Cancel</button>
        <button class="modal-btn modal-btn-confirm" onclick="confirmDelete()">Delete Order</button>
      </div>
    </div>
  </div>

  <script>
    let allOrders = [];
    let orderToDelete = null;

    function loadAllOrders() {
      document.getElementById('ordersContainer').innerHTML = '<div class="loading">Loading orders</div>';
      document.getElementById('searchInput').value = '';
      
      google.script.run
        .withSuccessHandler(displayOrders)
        .withFailureHandler(showError)
        .getOrderData();
    }

    function searchOrders() {
      const searchTerm = document.getElementById('searchInput').value;
      document.getElementById('ordersContainer').innerHTML = '<div class="loading">Searching</div>';
      
      google.script.run
        .withSuccessHandler(displayOrders)
        .withFailureHandler(showError)
        .searchOrders(searchTerm);
    }

    function updateStats(orders) {
      const totalOrders = orders.length;
      const totalRevenue = orders.reduce((sum, order) => {
        const amount = parseFloat(order.totalAmount) || 0;
        return sum + amount;
      }, 0);

      document.getElementById('totalOrders').textContent = totalOrders;
      document.getElementById('totalRevenue').textContent = '‚Çπ' + totalRevenue.toLocaleString('en-IN');
    }

    function openDeleteModal(orderId, orderShortId) {
      orderToDelete = orderId;
      document.getElementById('modalOrderId').textContent = 'Order #' + orderShortId;
      document.getElementById('deleteModal').style.display = 'block';
    }

    function closeDeleteModal() {
      orderToDelete = null;
      document.getElementById('deleteModal').style.display = 'none';
    }

    function confirmDelete() {
      if (!orderToDelete) return;

      const modal = document.getElementById('deleteModal');
      const modalContent = modal.querySelector('.modal-content');
      modalContent.innerHTML = '<div style="text-align: center; padding: 40px;"><div class="loading">Deleting order</div></div>';

      google.script.run
        .withSuccessHandler(handleDeleteSuccess)
        .withFailureHandler(handleDeleteError)
        .deleteOrder(orderToDelete);
    }

    function handleDeleteSuccess(result) {
      closeDeleteModal();
      
      if (result.success) {
        // Show success message
        const container = document.getElementById('ordersContainer');
        const successMsg = document.createElement('div');
        successMsg.style.cssText = 'position: fixed; top: 20px; right: 20px; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 20px 30px; border-radius: 15px; box-shadow: 0 10px 30px rgba(40, 167, 69, 0.4); z-index: 1001; font-weight: 700; animation: slideIn 0.3s;';
        successMsg.innerHTML = '‚úÖ Order deleted successfully!';
        document.body.appendChild(successMsg);
        
        setTimeout(() => {
          successMsg.remove();
        }, 3000);

        // Reload orders
        loadAllOrders();
      } else {
        alert('Error: ' + result.message);
        loadAllOrders();
      }
    }

    function handleDeleteError(error) {
      closeDeleteModal();
      alert('Error deleting order: ' + error);
      loadAllOrders();
    }

    function displayOrders(orders) {
      allOrders = orders;
      const container = document.getElementById('ordersContainer');
      
      updateStats(orders);

      if (!orders || orders.length === 0) {
        container.innerHTML = '<div class="no-orders">No orders found</div>';
        return;
      }

      let html = '<div class="orders-grid">';
      
      orders.forEach((order, index) => {
        const cardNumber = index + 1;
        const shortId = order.orderId.substring(0, 8).toUpperCase();
        html += `
          <div class="order-card">
            <div class="order-header">
              <div style="display: flex; align-items: center; gap: 15px;">
                <div class="order-number">${cardNumber}</div>
                <div class="order-id">ORDER #${shortId}</div>
              </div>
              <div class="order-date">üìÖ ${order.orderDate}</div>
            </div>

            <div class="customer-info">
              <div class="customer-name">üë§ ${order.customerName}</div>
              <div class="info-row">
                <span class="info-label">üìß Email:</span>
                <span>${order.email}</span>
              </div>
              <div class="info-row">
                <span class="info-label">üì± Phone:</span>
                <span>${order.phone}</span>
              </div>
            </div>

            <div class="address-section">
              <div class="section-title">üìç Delivery Address</div>
              <div style="color: #555; line-height: 1.8; font-weight: 600;">
                ${order.address}<br>
                ${order.city}, ${order.state} - ${order.pincode}
              </div>
            </div>

            <div class="products-section">
              <div class="section-title">üõçÔ∏è Products (${order.products.length})</div>
              ${order.products.map(product => `
                <div class="product-item">
                  <div class="product-header">
                    <div class="product-name">${product.name}</div>
                    <div class="product-price">‚Çπ${product.disprice}</div>
                  </div>
                  <div class="product-details">
                    <div class="product-detail"><span>Qty:</span> ${product.quantity}</div>
                    <div class="product-detail"><span>Weight:</span> ${product.weight}</div>
                    <div class="product-detail"><span>Category:</span> ${product.category}</div>
                    <div class="product-detail"><span>MRP:</span> ‚Çπ${product.realprise}</div>
                  </div>
                </div>
              `).join('')}
            </div>

            <div class="order-summary">
              <div class="total-amount">TOTAL: ‚Çπ${order.totalAmount}</div>
              <div class="payment-method">${order.paymentMethod}</div>
            </div>

            ${order.comments && order.comments !== 'comment' && order.comments !== 'scommentf' ? `
              <div class="comments">
                <strong>üí¨ Comments:</strong> ${order.comments}
              </div>
            ` : ''}

            <button class="delete-btn" onclick="openDeleteModal('${order.orderId}', '${shortId}')">
              üóëÔ∏è Delete Order
            </button>
          </div>
        `;
      });
      
      html += '</div>';
      container.innerHTML = html;
    }

    function showError(error) {
      document.getElementById('ordersContainer').innerHTML = 
        '<div class="no-orders">Error loading orders: ' + error + '</div>';
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('deleteModal');
      if (event.target == modal) {
        closeDeleteModal();
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          searchOrders();
        }
      });
      
      loadAllOrders();
    });
  </script>
</body>
</html>


